#!/bin/bash
# mise description="Test shortcut menu in fzf"

(
KEYMAP="cat <<-EOF | column -t -s $';'
key :: cmd
j   :: ---test
a   :: test
ad  :: test
d   :: test
EOF
"
fzf --ansi --select-1 \
    --query '^' \
    --bind "start:reload:$KEYMAP" \
    --bind 'one:accept' \
    --color "hl:-1:underline,hl+:-1:underline:reverse" \
    --no-tmux \
    --delimiter '\s+::\s+'\
    --header-lines=1 \
    --style full \
    --with-nth='{1}' \
    --preview '[[ "{q}" = "{1}" ]] && echo 1 || false; echo $PPID' \
    ;
    # --bind 'change:execute:([[ "{q}" == "{1}" ]] && printf {3})+down' \
)




# --delimiter '[:;]+' \
# remove delimiter
# ps -ef | fzf --multi --header-lines 1 --bind 'enter:become(echo {+2})'
#
# height=~100% 는 최대 높이가 아니라 현재 라인에서 내용만큼만 표시됨
#
#
# fzf --layout reverse-list --no-input \
#    --bind 'j:down,k:up,/:show-input+unbind(j,k,/)' \
#    --bind 'enter,esc,ctrl-c:transform:
#      if [[ $FZF_INPUT_STATE = enabled ]]; then
#        echo "rebind(j,k,/)+hide-input"
#      elif [[ $FZF_KEY = enter ]]; then
#        echo accept
#      else
#        echo abort
#      fi
#    '

# --preview-window '~4,+{2}+4/3,<80(up)')
#  ~4 는 4줄을 고정 헤더로 만들어 항상 표시되게 만듬
#  +{2} 는 두번째 토큰에서 기본 오프셋을 추출
#  +4 는 헤더를 보정하기 위해 기본 오프셋에 4줄을 추가
#  /3 은 오프셋을 조정하여 일치하는 줄이 창의 세 번째 위치에 표시되도록 함
#  <80(up) 는 미리보기 창의 대체 옵션을 지정합니다.
#          기본적으로 미리보기 창은 오른쪽에 50% 너비로 열립니다. 그러나 너비가 80열보다 좁으면 50% 높이로 메인 창 위에 열립니다.
#
#  --preview-window 'down,60%,border-top,+{2}+3/3,~3' \
#
# down,50%,<70(down,40%)
#  - 아래로 50% 높이로 열림
#  - 미리보기 창이 70열보다 좁으면 아래에 40% 높이로 열림
#
##stern . --color always 2>&1 |
#    fzf --ansi --tail 100000 --tac --no-sort --exact --wrap \
#        --bind 'ctrl-o:execute:vim -n <(kubectl logs {1})' \
#        --bind 'enter:execute:kubectl exec -it {1} -- bash' \
#        --header '╱ Enter (kubectl exec) ╱ CTRL-O (open log in vim) ╱'
#
# rg --column --line-number --no-heading --color=always --smart-case -- bash |
#   perl -pe 's/\n/\0/; s/^([^:]+:){3}/$&\n  /' |
#   fzf --read0 --ansi --highlight-line --multi --delimiter : \
#       --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
#       --preview-window '+{2}/4' --gap |
#   perl -ne '/^([^:]+:){3}/ and print'
#
## ripgrep->fzf->vim [QUERY]
# rfv() (
#   RELOAD='reload:rg --column --color=always --smart-case {q} || :'
#   OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
#             vim {1} +{2}     # No selection. Open the current line in Vim.
#           else
#             vim +cw -q {+f}  # Build quickfix list for the selected items.
#           fi'
#   fzf --disabled --ansi --multi \
#       --bind "start:$RELOAD" --bind "change:$RELOAD" \
#       --bind "enter:become:$OPENER" \
#       --bind "ctrl-o:execute:$OPENER" \
#       --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
#       --delimiter : \
#       --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
#       --preview-window '~4,+{2}+4/3,<80(up)' \
#       --query "$*"
# )

# RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
# INITIAL_QUERY="${*:-}"
# IFS=: read -ra selected < <(
#   FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
#   fzf --ansi \
#       --color "hl:-1:underline,hl+:-1:underline:reverse" \
#       --disabled --query "$INITIAL_QUERY" \
#       --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
#       --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+clear-query+rebind(ctrl-r)" \
#       --bind "ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)" \
#       --prompt '1. ripgrep> ' \
#       --delimiter : \
#       --preview 'bat --color=always {1} --highlight-line {2}' \
#       --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
# )
# [ -n "${selected[0]}" ] && $EDITOR "${selected[0]}" "+${selected[1]}"
#
#
# fzf --ansi --select-1 \
#     --bind "start:reload:$KEYMAP" \
#     --bind "change:execute:if [[ {q} == {1} ]]; then printf '%s\n' {1} && kill -SIGTERM $PPID; fi" \
#     --preview 'echo {1}'

# terminal.go
# func parsePlaceholder(match string) (bool, string, placeholderFlags) {
# 	flags := placeholderFlags{}

# 	if match[0] == '\\' {
# 		// Escaped placeholder pattern
# 		return true, match[1:], flags
# 	}

# 	if strings.HasPrefix(match, "{fzf:") {
# 		// {fzf:*} are not determined by the current item
# 		flags.forceUpdate = true
# 		return false, match, flags
# 	}

# 	trimmed := ""
# 	for _, char := range match[1:] {
# 		switch char {
# 		case '+':
# 			flags.plus = true
# 		case 's':
# 			flags.preserveSpace = true
# 		case 'n':
# 			flags.number = true
# 		case 'f':
# 			flags.file = true
# 		case 'q':
# 			flags.forceUpdate = true
# 			trimmed += string(char)
# 		default:
# 			trimmed += string(char)
# 		}
# 	}
#
# func replacePlaceholder(params replacePlaceholderParams) (string, []string) {
# 	tempFiles := []string{}
# 	current := params.allItems[:1]
# 	selected := params.allItems[1:]
# 	if current[0] == nil {
# 		current = []*Item{}
# 	}
# 	if selected[0] == nil {
# 		selected = []*Item{}
# 	}

# 	// replace placeholders one by one
# 	replaced := placeholder.ReplaceAllStringFunc(params.template, func(match string) string {
# 		escaped, match, flags := parsePlaceholder(match)

# 		// this function implements the effects a placeholder has on items
# 		var replace func(*Item) string

# 		// placeholder types (escaped, query type, item type, token type)
# 		switch {
# 		case escaped:
# 			return match
# 		case match == "{q}" || match == "{fzf:query}":
# 			return params.executor.QuoteEntry(params.query)
# 		case strings.HasPrefix(match, "{q:"):
# 			if nth, err := splitNth(match[3 : len(match)-1]); err == nil {
# 				elems, prefixLength := awkTokenizer(params.query)
# 				tokens := withPrefixLengths(elems, prefixLength)
# 				trans := Transform(tokens, nth) # https://github.com/junegunn/fzf/blob/master/src/tokenizer.go#L244
# 				result := JoinTokens(trans)
# 				if !flags.preserveSpace {
# 					result = strings.TrimSpace(result)
# 				}
# 				return params.executor.QuoteEntry(result)
# 			}

# 			return match
# 		case match == "{}":
# 			replace = func(item *Item) string {
# 				switch {
# 				case flags.number:
# 					n := item.text.Index
# 					if n == minItem.Index() {
# 						// NOTE: Item index should normally be positive, but if there's no
# 						// match, it will be set to math.MinInt32, and we don't want to
# 						// show that value. However, int32 can overflow, especially when
# 						// `--tail` is used with an endless input stream, and the index of
# 						// an item actually can be math.MinInt32. In that case, you're
# 						// getting an incorrect value, but we're going to ignore that for
# 						// now.
# 						return "''"
# 					}
# 					return strconv.Itoa(int(n))
# 				case flags.file:
# 					return item.AsString(params.stripAnsi)
# 				default:
# 					return params.executor.QuoteEntry(item.AsString(params.stripAnsi))
# 				}
# 			}
# 		case match == "{fzf:action}":
# 			return params.lastAction.Name()
# 		case match == "{fzf:prompt}":
# 			return params.executor.QuoteEntry(params.prompt)
# 		default:
# 			// token type and also failover (below)
# 			rangeExpressions := strings.Split(match[1:len(match)-1], ",")
# 			ranges := make([]Range, len(rangeExpressions))
# 			for idx, s := range rangeExpressions {
# 				r, ok := ParseRange(&s) // ellipsis (x..y) and shorthand (x..x) range syntax
# 				if !ok {
# 					// Invalid expression, just return the original string in the template
# 					return match
# 				}
# 				ranges[idx] = r
# 			}

# 			replace = func(item *Item) string {
# 				tokens := Tokenize(item.AsString(params.stripAnsi), params.delimiter)
# 				trans := Transform(tokens, ranges)
# 				str := JoinTokens(trans)

# 				// trim the last delimiter
# 				if params.delimiter.str != nil {
# 					str = strings.TrimSuffix(str, *params.delimiter.str)
# 				} else if params.delimiter.regex != nil {
# 					delims := params.delimiter.regex.FindAllStringIndex(str, -1)
# 					// make sure the delimiter is at the very end of the string
# 					if len(delims) > 0 && delims[len(delims)-1][1] == len(str) {
# 						str = str[:delims[len(delims)-1][0]]
# 					}
# 				}

# 				if !flags.preserveSpace {
# 					str = strings.TrimSpace(str)
# 				}
# 				if !flags.file {
# 					str = params.executor.QuoteEntry(str)
# 				}
# 				return str
# 			}
# 		}

# 		// apply 'replace' function over proper set of items and return result

# 		items := current
# 		if flags.plus || params.forcePlus {
# 			items = selected
# 		}
# 		replacements := make([]string, len(items))

# 		for idx, item := range items {
# 			replacements[idx] = replace(item)
# 		}

# 		if flags.file {
# 			file := WriteTemporaryFile(replacements, params.printsep)
# 			tempFiles = append(tempFiles, file)
# 			return file
# 		}
# 		return strings.Join(replacements, " ")
# 	})

# 	return replaced, tempFiles
# }

# 	matchWithoutFlags := "{" + trimmed

# 	return false, matchWi

# fzf --bind 'change:execute-silent([[ $(fzf-tmux --print-query | wc -l) -eq 2 ]] && echo $(fzf-tmux --print-query | tail -n1) && kill $(ps -o ppid= -p $$) 2>/dev/null)'
# fzf --bind 'change:if([[ $(wc -l <<< {} ) -eq 1 ]]; then print {}; exit; fi)'
#
# $FZF_QUERY: same {q}. but if nothing matches, it doesn’t work.

# {} : selected item
# {q} : query
# {1}, {2} : delimiter base fields
#   --delimiter : <- regex
# {1..2} : range fields
# {f} : fzf temporary file path
# {n} : index (RN)
# {+f}, {+n} : multiple select case

# example:
#   --bind='ctrl-r:reload(date; ps -ef)'

#   --bind 'ctrl-d:change-prompt(Dir> )+reload(find * -type d)' \
#   --bind 'ctrl-f:change-prompt(Files> )+reload(find * -type f)'

#   RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
#   --bind 'start:reload:$RG_PREFIX {q}' \
#   --bind 'change:reload:sleep 0.1; $RG_PREFIX {q} || true' \
#   --bind 'enter:become(vim {1} +{2}' \
#   --bind 'alt-enter:unbind(change,alt-enter)+change-prompt(2. fzf> )+enable-search+clear-query'

#   --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+rebind(ctrl-r)+transform-query(echo {q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f)" \
#   --bind "ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)+transform-query(echo {q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r)"

#   command='kubectl get pods' fzf \
#     --bind 'start:reload:$command' \
#     --bind 'enter:execute:kubectl exec -it --namespace {1} {2} -- bash'

# # actions: https://github.com/junegunn/fzf/blob/master/src/terminal.go
#	reqPrompt util.EventType = iota
	# reqInfo
	# reqHeader
	# reqList
	# reqJump
	# reqActivate
	# reqReinit
	# reqFullRedraw
	# reqResize
	# reqRedrawInputLabel
	# reqRedrawHeaderLabel
	# reqRedrawListLabel
	# reqRedrawBorderLabel
	# reqRedrawPreviewLabel
	# reqClose
	# reqPrintQuery
	# reqPreviewReady
	# reqPreviewEnqueue
	# reqPreviewDisplay
	# reqPreviewRefresh
	# reqPreviewDelayed
	# reqBecome
	# reqQuit
	# reqFatal
#
#

# 	prefix := actionNameRegexp.FindString(str)
# 	switch prefix {
# 	case "become": return actBecome
# 	case "reload": return actReload
# 	case "reload-sync": return actReloadSync
# 	case "unbind": return actUnbind
# 	case "rebind": return actRebind
# 	case "toggle-bind": return actToggleBind
# 	case "preview": return actPreview
# 	case "change-header": return actChangeHeader
# 	case "change-list-label": return actChangeListLabel
# 	case "change-border-label": return actChangeBorderLabel
# 	case "change-preview-label": return actChangePreviewLabel
# 	case "change-input-label": return actChangeInputLabel
# 	case "change-header-label": return actChangeHeaderLabel
# 	case "change-preview-window": return actChangePreviewWindow
# 	case "change-preview": return actChangePreview
# 	case "change-prompt": return actChangePrompt
# 	case "change-query": return actChangeQuery
# 	case "change-multi": return actChangeMulti
# 	case "change-nth": return actChangeNth
# 	case "pos": return actPosition
# 	case "execute": return actExecute
# 	case "execute-silent": return actExecuteSilent
# 	case "execute-multi": return actExecuteMulti
# 	case "print": return actPrint
# 	case "put": return actPut
# 	case "transform": return actTransform
# 	case "transform-list-label": return actTransformListLabel
# 	case "transform-border-label": return actTransformBorderLabel
# 	case "transform-preview-label": return actTransformPreviewLabel
# 	case "transform-input-label": return actTransformInputLabel
# 	case "transform-header-label": return actTransformHeaderLabel
# 	case "transform-header": return actTransformHeader
# 	case "transform-nth": return actTransformNth
# 	case "transform-prompt": return actTransformPrompt
# 	case "transform-query": return actTransformQuery
# 	case "transform-search": return actTransformSearch
# 	case "search": return actSearch
# 	}


# case "ignore": appendAction(actIgnore)
# case "beginning-of-line": appendAction(actBeginningOfLine)
# case "abort": appendAction(actAbort)
# case "accept": appendAction(actAccept)
# case "accept-non-empty": appendAction(actAcceptNonEmpty)
# case "accept-or-print-query": appendAction(actAcceptOrPrintQuery)
# case "print-query": appendAction(actPrintQuery)
# case "refresh-preview": appendAction(actRefreshPreview)
# case "replace-query": appendAction(actReplaceQuery)
# case "backward-char": appendAction(actBackwardChar)
# case "backward-delete-char": appendAction(actBackwardDeleteChar)
# case "backward-delete-char/eof": appendAction(actBackwardDeleteCharEof)
# case "backward-word": appendAction(actBackwardWord)
# case "clear-screen": appendAction(actClearScreen)
# case "delete-char": appendAction(actDeleteChar)
# case "delete-char/eof": appendAction(actDeleteCharEof)
# case "deselect": appendAction(actDeselect)
# case "end-of-line": appendAction(actEndOfLine)
# case "cancel": appendAction(actCancel)
# case "clear-query": appendAction(actClearQuery)
# case "clear-selection": appendAction(actClearSelection)
# case "forward-char": appendAction(actForwardChar)
# case "forward-word": appendAction(actForwardWord)
# case "jump": appendAction(actJump)
# case "jump-accept": appendAction(actJumpAccept)
# case "kill-line": appendAction(actKillLine)
# case "kill-word": appendAction(actKillWord)
# case "unix-line-discard", "line-discard": appendAction(actUnixLineDiscard)
# case "unix-word-rubout", "word-rubout": appendAction(actUnixWordRubout)
# case "yank": appendAction(actYank)
# case "backward-kill-word": appendAction(actBackwardKillWord)
# case "toggle-down": appendAction(actToggle, actDown)
# case "toggle-up": appendAction(actToggle, actUp)
# case "toggle-in": appendAction(actToggleIn)
# case "toggle-out": appendAction(actToggleOut)
# case "toggle-all": appendAction(actToggleAll)
# case "toggle-search": appendAction(actToggleSearch)
# case "toggle-track": appendAction(actToggleTrack)
# case "toggle-track-current": appendAction(actToggleTrackCurrent)
# case "toggle-input": appendAction(actToggleInput)
# case "hide-input": appendAction(actHideInput)
# case "show-input": appendAction(actShowInput)
# case "toggle-header": appendAction(actToggleHeader)
# case "toggle-wrap": appendAction(actToggleWrap)
# case "toggle-multi-line": appendAction(actToggleMultiLine)
# case "toggle-hscroll": appendAction(actToggleHscroll)
# case "show-header": appendAction(actShowHeader)
# case "hide-header": appendAction(actHideHeader)
# case "track", "track-current": appendAction(actTrackCurrent)
# case "untrack-current": appendAction(actUntrackCurrent)
# case "select": appendAction(actSelect)
# case "select-all": appendAction(actSelectAll)
# case "deselect-all": appendAction(actDeselectAll)
# case "close": appendAction(actClose)
# case "toggle": appendAction(actToggle)
# case "down": appendAction(actDown)
# case "up": appendAction(actUp)
# case "first", "top": appendAction(actFirst)
# case "last": appendAction(actLast)
# case "page-up": appendAction(actPageUp)
# case "page-down": appendAction(actPageDown)
# case "half-page-up": appendAction(actHalfPageUp)
# case "half-page-down": appendAction(actHalfPageDown)
# case "prev-history", "previous-history": appendAction(actPrevHistory)
# case "next-history": appendAction(actNextHistory)
# case "prev-selected": appendAction(actPrevSelected)
# case "next-selected": appendAction(actNextSelected)
# case "show-preview": appendAction(actShowPreview)
# case "hide-preview": appendAction(actHidePreview)
# case "toggle-preview": appendAction(actTogglePreview)
# case "toggle-preview-wrap": appendAction(actTogglePreviewWrap)
# case "toggle-sort": appendAction(actToggleSort)
# case "offset-up": appendAction(actOffsetUp)
# case "offset-down": appendAction(actOffsetDown)
# case "offset-middle": appendAction(actOffsetMiddle)
# case "preview-top": appendAction(actPreviewTop)
# case "preview-bottom": appendAction(actPreviewBottom)
# case "preview-up": appendAction(actPreviewUp)
# case "preview-down": appendAction(actPreviewDown)
# case "preview-page-up": appendAction(actPreviewPageUp)
# case "preview-page-down": appendAction(actPreviewPageDown)
# case "preview-half-page-up": appendAction(actPreviewHalfPageUp)
# case "preview-half-page-down": appendAction(actPreviewHalfPageDown)
# case "enable-search": appendAction(actEnableSearch)
# case "disable-search": appendAction(actDisableSearch)
# case "put": if putAllowed {
# case "bell": appendAction(actBell)
# case "exclude": appendAction(actExclude)
# case "exclude-multi": appendAction(actExcludeMulti)
#
# // Events
# Resize
# Change
# BackwardEOF
# Start
# Load
# Focus
# tui.One
# Zero
# Result
# Jump
# JumpCancel
# ClickHeader
