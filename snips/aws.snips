snippet monthly_pricing "roughly. base 2024-10"
EBS gp3           | $91  /TB
EBS gp2           | $114 /TB
RDS Storage       | $120 /TB
RDS db.r5.large   | $250 /ea | 2CPU 16GiB
RDS db.t3.medium  | $91  /ea | 2CPU 4GiB
RDS db.t4g.medium | $108 /ea | 2CPU 4GiB
Aurora Serverless | $146 /ea | 1ACU: 2GiB, 730 hour
RDS backup        | $23  /TB
S3                | $23  /TB
S3 tag            | $1   /100만tag
ECR               | $100 /TB
EKS               | $58  /ea
EC2 m5.xlarge     | $138 /ea | 4CPU 16GiB
EC2 m5.large      | $69  /ea | 2CPU 8GiB
endsnippet

snippet simple_info ""

== EC2
           | CPU | Memory | price/day | price/month
m5.large   | 2   | 8 GB   | $ 2.304   | $ 69.120
m5.xlarge  | 4   | 16 GB  | $ 4.608   | $ 138.240
m5.2xlarge | 8   | 32 GB  | $ 9.216   | $ 276.480

== EKS
    | price/day
EKS | $ 2.400

== EBS
    | 1 GB/month | 100 GB/month
gp3 | $ 0.080    | $ 8.000

== S3
         | 1 GB/month | 100 GB/month
standard | $ 0.023    | $ 2.300

== 나라장터

        | CPU        | Memory | price/once
2024-04 | 2 (16core) | 128 GB | KRW 25,000,000

endsnippet

snippet cli_lightsail_put_public_ports "overwrite all"
aws lightsail put-instance-public-ports \
  --instance-name=app \
  --port-infos \
    fromPort=22,toPort=22,protocol=tcp,cidrs=192.168.0.1/24,cidr_list_aliases=lightsail-connect \
    fromPort=80,toPort=80,protocol=tcp
endsnippet

snippet install_docker_on_amazon_linux_2023 ""
sudo yum update -y
sudo yum install docker -y
sudo service docker start
sudo usermod -aG docker ec2-user
# reconnect
docker run hello-world

# compose
sudo mkdir -p /usr/local/lib/docker/cli-plugins/
sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
endsnippet

snippet eks_node_groups ""
# get list
aws eks list-nodegroups --cluster-name <cluster> --output json | jq -r '.nodegroups[]'

# get describe
aws eks list-nodegroups --cluster-name <cluster> --output json | jq -r '.nodegroups[]' \
  | xargs -I{} aws eks describe-nodegroup --cluster-name <cluster> --nodegroup {} --output json | jq -r '[.nodegroup.nodegroupName, .nodegroup.scalingConfig]'

# update scaling
aws eks update-nodegroup-config --cluster-name <cluster> --nodegroup-name <nodegroup> --scaling-config desiredSize=2
endsnippet

snippet eks_all_asg_instance ""
aws eks list-nodegroups --cluster-name <cluster> --output json | jq -r '.nodegroups[]' \
  | xargs -I% aws eks describe-nodegroup --cluster-name <cluster> --nodegroup % --query 'nodegroup.resources.autoScalingGroups[*].name' --output text \
  | xargs -I% aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names % --query 'AutoScalingGroups[*].Instances[*].InstanceId' --output json \
  | jq -r '.[][]' | sort > all_asg_instance.txt
endsnippet

snippet ecs_describe ""
aws ec2 describe-instances \
  | jq -r '.Reservations[]
    | .Instances[]
    | [
        (.Tags[]|select(.Key=="Name")|.Value),
        (.Tags[]|select(.Key=="aws:eks:cluster-name")|.Value),
        (.Tags[]|select(.Key=="aws:autoscaling:groupName")|.Value),
        .InstanceId
      ]
    | @tsv
  ' \
  | sort | column -t
endsnippet

snippet query_log_group ""
aws logs start-query --log-group-name <group> \
  --start-time $(gdate -d "1 hour ago" +%s) \
  --end-time $(gdate +%s) \
  --query-string \
    "fields @timestamp, @message, @logStream, @log
      | filter @logStream =~ 'test'
      | sort @timestamp asc
      | limit 10000" \
  | jq -r '.queryId' \
  | xargs -I {} aws logs get-query-results --query-id {} \
  | jq -r '.results[] | map({(.field | sub("@"; "")): .value}) | add | [.timestamp, .logStream, .message] | @tsv'
endsnippet

snippet query_log_tail ""
aws logs tail "<group>" --follow --query "filter @message like /Error/"
endsnippet

snippet ecs_task_definition_attributes ""
family: "app"
networkMode: "awsvpc"
requiresCompatibilities: ["FARGATE"]
cpu: "256"
memory: "512"
tags
containerDefinitions:
  - name: whoami
    image: traefik/whoami
    cpu: 256
    memory: 512
    portMappings:
      - containerPort: 80
        hostPort: 80
    essential: true
    environment:
      - name: NODE_ENV
        value: production

# taskRoleArn
# executionRoleArn
# volumes
# placementConstraints
# pidMode
# ipcMode
# proxyConfiguration
# inferenceAccelerators
# ephemeralStorage
# runtimePlatform
endsnippet
