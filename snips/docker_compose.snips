snippet services_template "services"
version: '3.9'

services:
  node:
    image: ubuntu:latest
    restart: always
    environment:
      - NAME=test
    ports:
      - 3000:3000
    volumes:
      - ./app:/app
    command:
      - --option
    depends_on:
      - another_node
endsnippet

snippet args "services.<service>.args"
    args:
      - NAME=test
endsnippet

snippet command "services.<service>.command"
    command:
      - NAME=test
endsnippet

snippet environment "services.<service>.environment"
    environment:
      - NAME=test
endsnippet

snippet depends_on "services.<service>.depends_on"
    depends_on:
      db:
        condition: service_healthy
        restart: true  # when db updated, restart this service
      redis:
        condition: service_started
      init:
        condition: service_completed_successfully
endsnippet

snippet ports "services.<service>.ports"
    ports:
      - 3000:3000/tcp
endsnippet

snippet volumes "services.<service>.volumes"
    volumes:
      - ./app:/app
endsnippet

snippet privileged "services.<service>.privileged"
    privileged: true
endsnippet

snippet deploy_replicas "services.<service>.deploy"
    deploy:
      mode: replicated
      replicas: 2
endsnippet

snippet networks_alloc_ip "services.<service>.networks. require network subnet"
    networks:
      main:
        ipv4_address: 10.0.100.1
endsnippet

snippet networks_subnet ".networks"
networks:
  main:
    name: main
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.100.0/16
endsnippet

snippet build ".services.<service>; context based on dockerfile path. dockerfile is optional"
    build:
      context: ./src
      dockerfile: ../service.Dockerfile
      platforms:
        - amd64
        - arm64
      args:
        - VAULT=TEST
endsnippet

snippet build_inline ".services.<service>"
    build:
      context: ./src
      dockerfile_inline: |
        FROM baseimage
        RUN command
endsnippet

snippet template_remote_buildkit ".services"
  # https://docs.docker.com/build/drivers/remote/
  remote-buildkit:
    image: moby/buildkit:latest
    ports:
      - 1234:1234
    command:
      - --addr
      - tcp://0.0.0.0:1234
    privileged: true
    restart: no
endsnippet

snippet inline_entrypoint ".services.<service>; no command"
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep infinity
endsnippet

snippet x_environment ""
x-environment:
  &environment
  - DATABASE_URL=postgres://localhost:5432

#  service_name:
#    environment: *environment
endsnippet

snippet x_environment_merge ""
x-environment: &environment
  - DATABASE_URL=postgres://localhost:5432

#  service_name:
#    environment:
#      <<: *environment
endsnippet

snippet x_logging ""
x-logging:
  &default-logging
  options:
    max-size: '10m'
    max-file: '10'
  driver: json-file

#  service_name:
#    logging: *default-logging
endsnippet

snippet x_entrypoint ""
x-entrypoint:
  &entrypoint
  - /bin/sh
  - -c
  - |
    echo 123

#  service_name:
#    entrypoint:
#      *entrypoint
endsnippet

snippet x_common ""
x-common: &common
  restart: always
  logging:
    driver: json-file
    options:
      max-size: '10m'
      max-file: '10'

# service_name:
#   <<: *common
endsnippet

snippet include "."
include:
  - file: ./services.yml
endsnippet

snippet replicas_trick "conditional use"
services:
  service_a:
    deploy:
      replicas: ${COMPOSE_USE_SERVICE_A:-0}
endsnippet

snippet use_environment_variable ""
# `docker compose run -e DEBUG=true up`
services:
  backend:
    environment:
      - DEBUG=${DEBUG:-false}
endsnippet

snippet use_environment_file ""
# ref: https://docs.docker.com/compose/environment-variables/envvars-precedence/
# `docker-compose --env-file default.env up`
# defulat: use `.env`
services:
  backend:
    # env_file: "default.env"
    # env_file:
    #   - default.env
    env_file:
      - path: ./default.env
        required: true
      - path: ./override.env
        required: false
endsnippet

snippet compose_cli_environments ""
# https://docs.docker.com/compose/environment-variables/envvars/
COMPOSE_CONVERT_WINDOWS_PATHS
COMPOSE_FILE
COMPOSE_PROFILES
COMPOSE_PROJECT_NAME
DOCKER_CERT_PATH
COMPOSE_PARALLEL_LIMIT
COMPOSE_IGNORE_ORPHANS
COMPOSE_REMOVE_ORPHANS
COMPOSE_PATH_SEPARATOR
COMPOSE_ANSI
COMPOSE_STATUS_STDOUT
COMPOSE_ENV_FILES
COMPOSE_MENU
COMPOSE_EXPERIMENTAL
endsnippet

snippet profiles "multiple environment"
# `docker-compose --profile dev --profile ... up`
# `COMPOSE_PROFILES=debug,dev docker compose up`
services:
  service_a:
    environment:
      - ENV=dev
    profiles:
      - dev
      - prod
endsnippet

snippet deploy_watch "use `docker compose up --watch`"
services:
  backend:
    build: .  # require
    develop:
      watch:
        - path: ./app/html
          action: sync
          target: /var/www
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: sync+restart
          path: ./nginx.conf
          target: /etc/nginx/conf.d/default.conf
endsnippet

snippet fullset_database ""
version: "3.9"

services:
  mysql:
    image: mysql:8.0
    container_name: ${COMPOSE_PROJECT_NAME}-mysql
    healthcheck:
      test: ['CMD', 'mysqladmin' ,'ping', '-h', 'localhost']
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      MYSQL_ROOT_PASSWORD: 'password'
    expose:
      - '3306'
    networks:
      - docker-compose-default

  redis:
    image: bitnami/redis:6.2.7
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      REDIS_EXTRA_FLAGS: '--databases 256'
      ALLOW_EMPTY_PASSWORD: 'yes'
    expose:
      - '6379'
    networks:
      - docker-compose-default

  elasticsearch:
    image: bitnami/elasticsearch:7.17.7
    container_name: ${COMPOSE_PROJECT_NAME}-elasticsearch
    healthcheck:
      test: curl --fail 'localhost:9200/_cluster/health' || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      ELASTICSEARCH_HEAP_SIZE: '1024m'
    expose:
      - '9200'
    networks:
      - docker-compose-default

networks:
  docker-compose-default:
    external: true
endsnippet

snippet use_service "services.<name>.deploy; using replicas"
    deploy:
      replicas: ${COMPOSE_USE_SERVICE:-0}
endsnippet

snippet orb_local "orb domain"
    labels:
      - dev.orbstack.domains=service.project.orb.local
endsnippet

snippet orb_local_multiple "orb domain"
    labels:
      - dev.orbstack.domains=foo.local,bar.local
endsnippet

snippet orb_local_wildcard "orb domain"
    labels:
      - dev.orbstack.domains=*.foo.local
endsnippet

snippet orb_local_port "default: auto detect"
    labels:
      - dev.orbstack.http-port=8080
endsnippet

snippet services_certbot_and_nginx ""
services:
  nginx:
    image: nginx:latest
    restart: always
    network_mode: host
    volumes:
      - ${PWD}/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ${PWD}/certbot/conf:/etc/nginx/ssl
      - ${PWD}/certbot/conf:/etc/letsencrypt
      - ${PWD}/certbot/data:/var/www/certbot
    ports:
      - 80:80
      - 443:443

#  certbot:
#    image: certbot/certbot:latest
#    command: certonly --webroot --webroot-path=/var/www/certbot --email devops@example.com --agree-tos --no-eff-email -d web.example.com
#    volumes:
#      - ${PWD}/certbot/conf:/etc/letsencrypt
#      - ${PWD}/certbot/logs:/var/log/letsencrypt
#      - ${PWD}/certbot/data:/var/www/certbot
endsnippet

snippet service_postgres "base postgres"
  postgres:
    image: postgres:16.0
    ports:
      - 5432:5432/tcp
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_USER: "root"
      POSTGRES_DB: "dev"
    command:
      - "-cmax_connections=3000"
    volumes:
      - postgres-data:/var/lib/postgreql/data
    healthcheck:
      interval: 30s
      retries: 3
      start_interval: 5s
      start_period: 120s
      test: ['CMD-SHELL', 'pg_isready -U root']
      timeout: 5s
volumes:
  postgres-data:
endsnippet

snippet service_mysql "base mysql"
services:
  mysql:
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: dev
    image: mysql:8.0.28
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      interval: 30s
      retries: 3
      start_interval: 5s
      start_period: 180s
      test: ['CMD', 'mysql', '-u', 'root', '-ppassword', '-h', 'localhost', '-e', 'SHOW DATABASES;']
      timeout: 5s

volumes:
  mysql-data:
endsnippet

snippet localstack "test aws"
services:
  localstack:
    container_name: locakstack-main
    image: localstack/localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/

    volumes:
      - ./volumes/localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
endsnippet
