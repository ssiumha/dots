snippet mount_cache "cache specific target path"
# id: default is target path
# sharing: locked, private, shared(default. working concurrently)
RUN --mount=type=cache,id=gem,sharing=locked,target=/gem bundle install
endsnippet

snippet mount_cache_yarn "cache yarn berry"
RUN --mount=type=cache,sharing=locked,target=/root/.yarn/berry/cache yarn install --immutable
endsnippet

snippet mount_cache_go ""
RUN --mount=type=cache,target=/go/pkg/mod \
    go build -o /app/hello
endsnippet

snippet mount_cache_apt ""
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt update && apt-get --no-install-recommends install -y gcc
endsnippet

snippet mount_cache_python ""
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt
endsnippet

snippet mount_cache_ruby ""
RUN --mount=type=cache,target=/root/.gem \
    bundle install
endsnippet

snippet mount_cache_rust ""
RUN --mount=type=cache,target=/app/target/ \
    --mount=type=cache,target=/usr/local/cargo/git/db \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    cargo build
endsnippet

snippet install_apt "apt-get install"
RUN apt-get update && apt-get install -y curl
endsnippet

snippet replace_env "replace env"
ENV PATH="~/bin:$PATH"
endsnippet

snippet heredoc_copy "inline source"
COPY <<EOF /index.html
(your index page goes here)
EOF
endsnippet

snippet heredoc_copy_multiple "inline source multiple"
COPY <<robots.txt <<humans.txt /usr/share/nginx/html/
(robots content)
robots.txt
(humans content)
humans.txt
endsnippet

snippet heredoc_run "warning: not working exit"
RUN <<EOF
apt-get update
apt-get install -y curl
EOF
endsnippet

snippet heredoc_shabang "with run"
RUN <<EOF
#!/usr/bin/env python3
print(1)
endsnippet

snippet simple_sinatra "recommend volume"
FROM ruby:3.3
WORKDIR /app
RUN gem install sinatra puma haml

COPY <<-EOF app.rb
require 'sinatra'

configure do
  set :bind, '0.0.0.0'
end

get '/' do
  haml :index, locals: { bar: :foo }
end

__END__

@@ layout
%html
  != yield

@@ index
%div.title Hello world.
EOF

CMD ["ruby", "app.rb"]
endsnippet

snippet install_sysstat ""
RUN apt update && apt install -y procps sysstat cron
RUN perl -i -pe 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat && \
  perl -i -pe 's;5-55/10;*;' /etc/cron.d/sysstat && \
  perl -i -pe 's;debian-sa1 1 1;debian-sa1 5 12;' /etc/cron.d/sysstat

COPY <<ENTRY_EOF /app/entrypoint.sh
#!/usr/bin/env bash

set -euxo pipefail

service cron start
service sysstat start

/app/run "\\\$@"
ENTRY_EOF

RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]
endsnippet

snippet copy_entrypoint_nextjs "with nextjs"
COPY --chmod=500 <<EOF /docker-entrypoint.sh
#!/bin/sh
yarn prisma migrate dev
yarn dev
EOF

ENTRYPOINT ["/docker-entrypoint.sh"]
endsnippet

snippet copy_entrypoint "from cmd"
COPY --chmod=500 <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e

exec "\$@"
EOF

ENTRYPOINT ["/docker-entrypoint.sh"]
endsnippet

snippet copy_entrypoint_sops "sops"
ARG TARGET_ENV=${TARGET_ENV:-.env}
ENV TARGET_ENV=${TARGET_ENV}

COPY --chown=omp:omp --chmod=500 <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e

if [ -n "\$SOPS_AGE_KEY" ]; then
  # sops exec-env ${TARGET_ENV} "\$*"
  eval "\$(
  sops --decrypt ${TARGET_ENV} | grep -v '^#' \
    | while IFS='=' read -r key value; do
      if [ -z "\${!key}" ]; then
        echo "export \$key=\$value"
      fi
    done
  )"
  exec "\$*"
else
  exec "\$@"
fi
EOF
endsnippet

snippet go_build "go build"
FROM golang:1.23 as builder
WORKDIR /build
COPY . .
RUN CGO_ENABLED=0 go build -o /build/app

FROM alpine:3.20
COPY --from=builder /build/app /app/app
CMD ["/app/app"]
endsnippet

snippet node_build "node build"
FROM node:20.15-alpine as build

WORKDIR /app

COPY package.json yarn.lock ./

RUN yarn install --frozen-lockfile

COPY . .

COPY --chmod=500 <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e
yarn start
EOF

ENTRYPOINT ["/docker-entrypoint.sh"]
endsnippet

snippet simple_nginx ""
FROM ghcr.io/linuxserver/nginx:1.26.2

COPY ./nginx.conf /config/nginx/site-confs/default.conf
endsnippet

snippet install_sops ""
COPY --from=ghcr.io/getsops/sops:v3.9.4-alpine \
            /usr/local/bin/sops /usr/local/bin/sops
endsnippet
