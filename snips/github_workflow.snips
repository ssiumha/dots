snippet run_test_when_pull_request "basic action template"
name: Run Test when PR

on:
  pull_request:
    paths:
      - src/proj/**/*

jobs:
  test:
    name: Test proj
    runs-on: [ubuntu-22.04]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - working-directory: src/proj
        run: bin/rails test
endsnippet

snippet jobs_template "basic jobs template"
jobs:
  job1:
    name: workflow job
    runs-on: [self-hosted, ubuntu-22.04]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: work
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        working-directory: src/proj
        run: |
          echo 123
endsnippet

snippet action_node_template  ".github/actions/<action>/action.yaml"
name: action

outputs:
  argument-name:
    description: 'argument'

inputs:
  AWESOME_KEY:
    required: true
    type: string

runs:
  using: 'node20'
  main: 'main.js'
  post: 'post.js'
endsnippet

snippet template_build_ecr ""
name: Build and Push to ECR

on:
  pull_request:
    paths:
      - .github/workflows/build.yaml
  workflow_dispatch: {}

# need when self-hosted
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    timeout-minutes: 10

    concurrency:
      group: build
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      - name: Assume role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::000000000000:role/github-oidc-role
          aws-region: ap-northeast-2

      - name: Build and push to ECR
        run: |
          set -euxo pipefail
          docker build \
            --push
            -t 000000000000.dkr.ecr.ap-northeast-2.amazonaws.com/${{ github.repository }}:${{ github.sha }} \
            .
endsnippet

snippet step "jobs.job.steps[n]"
      - working-directory: src/proj
        env:
          TEST: TEST
        run: |
          echo 123
endsnippet

snippet step_gh_diff_files "jobs.job.steps[n]"
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr diff ${PR_NUMBER} --name-only
endsnippet

snippet on_trigger "on:"
on:
  # when pr opend, pushed
  pull_request:
    paths:
      - .github/workflows/currnet_work.yml

  # cron
  schedule:
    - cron: '0 * * * *'

  # can manual running
  workflow_dispatch: {}
endsnippet

snippet trigger_complete_another_workflow "on:"
on:
  workflow_run:
    workflows: [Workflow Name]
    types:
      - completed
endsnippet

snippet check_gh_using_perl ""
perl <<-'EOF'
  $_ = `gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" -q '.title'`;
  chomp;

  if ($? != 0) {
    print '::error::Failed to fetch the PR title';
    exit 1;
  }

  my @errors = ();
  push @errors, '::error::Detected trailing spaces' if /(^\s|\s$)/;
  push @errors, '::error::Detected double spaces' if /\s\s+/;

  if (@errors) {
    print "::error::Invalid PR title! : `$_`\n";
    print join "\n", @errors;
    exit 1;
  }
EOF
endsnippet

snippet concurrency "uniq job"
jobs:
  job1:
    concurrency:
      cancel-in-progress: true
      group: ${{ github.workflow }}-${{ github.ref }}
endsnippet

snippet print_group ""
        run: |
          echo '::group::init'
          echo 123
          echo '::endgroup::'
endsnippet

snippet github_summary ""
        run: |
          echo '### Result' >> $GITHUB_STEP_SUMMARY
endsnippet

snippet github_group "print pretty log"
        run: |
          echo '::group::init'
          echo 123
          echo '::endgroup::'
endsnippet

snippet github_annotation "print pretty log"
        # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-a-notice-message
        run: |
          echo "::error::Error message"
          echo "::warning file=app.js,line=1,endLine=2,col=5,title=warn::$text"
          echo "::notice::$text"
          echo "::debug"
endsnippet


snippet output ""
jobs:
  example-job:
    steps:
      - name: Generate output
        id: generate
        run: |
          echo "message=Hello, World!" >> ${GITHUB_OUTPUT}

          # need zero indent
          echo <<EOF >> ${GITHUB_OUTPUT}
          multiline<<OUT
          Line 1
          Line 2
          OUT
          EOF

          echo 'foo<<EOF' >> ${GITHUB_OUTPUT}
          echo -e "$errorMessages\n" >> ${GITHUB_OUTPUT}
          echo 'EOF' >> ${GITHUB_OUTPUT}
      - name: Use the output
        run: echo "The output message is: ${{ steps.generate.outputs.message }}"
endsnippet

snippet github_action_runner_url ""
https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
endsnippet

snippet yarn_registry_with_nexus ""
    steps:
      - name: yarn install
        env:
          YARN_NPM_REGISTRY_SERVER: https://nexus.example.com/repository/npm
          YARN_NPM_AUTH_IDENT: user:password
          YARN_NPM_ALWAYS_AUTH: true
        run: |
          yarn install
endsnippet

snippet matrix_with_path_check ""
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  filter:
    runs-on: [ubuntu-24.04]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            auth:
              - 'apps/auth/**'
              - 'libs/**'

      - name: Set matrix
        id: set-matrix
        run: |
          SERVICES=()
          if [[ "${{ steps.filter.outputs.auth }}" == "true" ]]; then
            SERVICES+=("auth")
          fi

          if [ ${#SERVICES[@]} -eq 0 ]; then
            echo "No services changed, matrix will be empty"
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
          else
            JSON_ARRAY=$(printf '"%s",' "${SERVICES[@]}" | sed 's/,$//')
            echo "matrix={\"service\":[${JSON_ARRAY}]}" >> $GITHUB_OUTPUT
            echo "Services to build: ${SERVICES[*]}"
          fi

  build:
    name: Build ${{ matrix.service }}
    needs: filter
    if: ${{ fromJSON(needs.filter.outputs.matrix).service[0] }}
    runs-on: [ubuntu-24.04]
    timeout-minutes: 10

    strategy:
      matrix: ${{ fromJSON(needs.filter.outputs.matrix) }}
      max-parallel: 2

    steps:
      - name: build
        run: |
          make docker-build-${{ matrix.service }}
endsnippet
