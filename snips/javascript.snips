snippet tomorrow "with timezone"
  const tomorrow = (new Date((new Date()).valueOf() + (86400 + 32400)*1000));
endsnippet

snippet get_time_string "like 2401010900"
const getTimeString = () => {
  const date = new Date()

  return [
    date.getFullYear(),
    date.getMonth(),
    date.getDay(),
    date.getHours(),
    date.getMinutes()
  ].map(num =>
    num.toString()
       .replace(/^\d\d(\d\d)$/, '$1')
       .replace(/^(\d)$/, '0$1')
  ).join('')
}
endsnippet

snippet get_iso_date "like 2024-01-01 09:00:00"
new Date().toLocaleString('sv-SE') // or lt
endsnippet

snippet for_between "0 -> 9"
for (let i = 0; i < 10; i++) {
}
endsnippet

snippet random "0 ~ 9"
Math.floor(Math.random() * 10)
endsnippet

snippet timestamp "second, typeof number"
Date.now()
endsnippet

snippet sleep "await sleep(ms)"
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))
endsnippet

snippet remote_all_local_storage "remove all local storage"
Object.keys(localStorage).forEach(k => { localStorage.removeItem(k)})
endsnippet

snippet inspect_object ""
console.log({
  className: obj.constructor.name,
  keys: Object.keys(obj)
})
endsnippet

snippet append_child "console"
var script = document.createElement('script');
script.src = 'https://example.com/main.js';
document.head.appendChild(script);
endsnippet

snippet define_property "read only variable"
# ref: defineProperties
Object.defineProperty(window, 'API_KEY', {
  value: 'KEY',
  writable: false, # prevent modify
  configurable: false, # prevent delete, redefine
})
endsnippet

snippet get_location_hostname ""
// https://example.com:1234/test/path
window.location.hostname // example.com
window.location.pathname // /test/path
endsnippet

snippet jsdoc "documentation"
/**
 * Represents a book.
 * @see Paper for details
 * @constructor
 * @param {string} title - The title of the book.
 * @param {string|number} [author] - optional param
 * @param {Object} options
 * @param {string} options.url
 * @param {string} [options.method="GET"]
 * @param {function(Error, string): void} callback
 * @returns {{ a: string, b: number }} This is the result {@link BookResult}
 */
function Book(title, author) {
}
endsnippet

snippet jest_module_mocking ""
jest.mock('../app/module', () => ({
  __esModule: true,
  default: jest.fn(() => 'mocked')
  getRepository: jest.fn().mockResolvedValue('mocked')
}))
endsnippet
