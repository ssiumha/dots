snippet node_affinity_to_instance_type "spec.template.spec.affinity"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                      - c7i.2xlarge
endsnippet

snippet topologySpreadConstraints "basic option"
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: app-name
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
endsnippet

snippet base_deployment "template"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: dev
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: api
      containers:
        - name: api
          image: 000000000000.dkr.ecr.ap-northeast-2.amazonaws.com/app:latest
          imagePullPolicy: Always
          env:
            - name: DATABASE_URL
              value: 'postgres://user:password@postgresql/dev'
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              memory: "1Gi"
              ephemeral-storage: "4Gi"
            requests:
              cpu: "100m"
              memory: "1Gi"
              ephemeral-storage: "4Gi"
endsnippet

snippet base_pvc "template persistent volume clame"
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: volume-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
endsnippet

snippet attach_pvc_spec "to container"
    spec:
      containers:
        - name: ubuntu
          image: ubuntu
          command:
            - sleep
            - "infinity"
          volumeMounts:
            - mountPath: /app/folder
              name: volume
      volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: volume-claim
endsnippet

snippet base_sts "template statefulset"
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
endsnippet

snippet graceful_terminate "spec.terminationGracePeriodSeconds"
    spec:
      terminationGracePeriodSeconds: 120
endsnippet

snippet external_name "kind: service"
---
kind: Service
apiVersion: v1
metadata:
  name: oauth2-proxy
  namespace: app
spec:
  type: ExternalName
  externalName: oauth2-proxy.helm.svc.cluster.local
  ports:
  - port: 80
endsnippet

snippet env_from_configmap "spec.containers.envFrom"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  labels:
    app.kubernetes.io/name: app-name
data:
  APP_LOGGING: "INFO"
  APP_NETWORK: "dev"
---
          envFrom:
            - configMapRef:
                name: app-config
endsnippet

snippet base_configmap ""
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  config.yaml: |
    key:
      - value
endsnippet

snippet mount_configmap ""
spec:
  containers:
    - volumeMounts:
      - name: app-config-volume
        mountPath: /app/config.yaml
        subPath: config.yaml
  volumes:
    - name: app-config-volume
      configMap:
        name: app-config
endsnippet

snippet base_service ""
apiVersion: v1
kind: Service
metadata:
  name: app-name
  namespace: app
spec:
  # clusterIP: 172.20.100.1 # if need static ip
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
      name: http
    - port: 4000
      protocol: UDP
      targetPort: 4000
      name: udp
  selector:
    app: app-name
    instance: app-instance
endsnippet

snippet base_ingress "with basic-auth"
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: app
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
spec:
  ingressClassName: ingress-nginx
  tls:
    - { hosts: ["app.example.com"], secretName: "wildcard-tls" }
  rules:
    - host: app.example.com
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: app-service
                port:
                  number: 3000
endsnippet

snippet volume_from_pvc ""
      volumes:
        - name: app-volume
          persistentVolumeClaim:
            claimName: app-pvc
endsnippet

snippet cluster_dns "cluster.local"
<service>.<namespace>.svc.cluster.local
<pod>.<namespace>.pod.cluster.local
endsnippet

snippet startupProbe ""
          startupProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "..."
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
endsnippet

snippet labels ".metadata"
metadata:
  labels:
    app.kubernetes.io/name: my-app
    app.kubernetes.io/instance: my-app-1234
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: front-end
    app.kubernetes.io/part-of: my-app-suite
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/created-by: my-team
endsnippet

snippet ingress_body_size "upload file size limit"
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
endsnippet
