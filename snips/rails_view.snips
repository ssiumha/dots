snippet keep_parameters "sticky parameters"
url_for(request.parameters.merge(page: 1)
endsnippet

snippet keep_parameters_only_query "{ page: 1}"
request.query_parameters.merge(page: 1)
endsnippet

snippet turbo_frame "simple sample"
<turbo-frame id="comments">
</turbo-frame>
endsnippet

snippet turbo_frame_tag "using ruby block"
<%= turbo_frame_tag :show_orderbook do %>
<% end %>
endsnippet

snippet turbo_refresh_method "to head"
<meta name="turbo-refresh-method" content="morph">
endsnippet

snippet turbo_refresh_scroll "to head"
<meta name="turbo-refresh-scroll" content="preserve">
endsnippet

snippet turbo_reload "in javascript"
<%= turbo_frame_tag :comments,
                    src: comments_path,
                    loading: :eager,
                    turbo_frame: :_top %>

<script>
  function reloadTurboFrame(elementId) {
    const el = document.getElementById(elementId);

    el.delegate.view.missing = () => {};
    el.reload();
  }

  reloadTurboFrame('comments')
</sciprt>
endsnippet

snippet turbo_visit_frame "visit only specific frame"
<%= turbo_frame_tag :comments %>

<script>
  Turbo.visit(location, { frame: 'comments' })
</script>
endsnippet


# TODO: rails js
snippet stimulus_reloader ""
export default class extends Controller {
  connect() {
    this.timer = setInterval(() => {
      // ...
    }, 5000);
  }

  disconnect() {
    clearInterval(this.timer)
  }
}
endsnippet

snippet errors_messages_for ""
<% @article.errors.full_messages_for(:title).each do |message| %>
  <span><%= message %></span>
<% end %>
endsnippet

snippet content_for ""
<%= content_for :head do %>
  <meta name="turbo-cache-control" content="no-cache">
<% end %>
endsnippet

snippet strict_locals ">= 7.1"
<%# locals: (address:, mobile: 1234567890) -%>
endsnippet

snippet disable_locals ">= 7.1"
<%# locals: () %>
endsnippet

snippet tag_attributes ""
<div <%= tag.attributes 'data-user-id': user_name, data: { color: } %> >
</div>
endsnippet

snippet html_safe "apply html tag from string"
<%= html_string.html_safe %>
endsnippet

snippet raw "apply html tag from string"
<%= raw html_string %>
endsnippet

snippet open_blob_document ""
<%= link_to rails_blob_path(attachment, disposition: :inline), target: '_blank', rel: 'noopener noreferrer' %>
  <span><%= attachment.filename %></span>
<% end %>
endsnippet

snippet form_with_post "remote is default true"
<%= form_with url: '/search', method: :get, data: { turbo: false } do |form| %>
  <%= form.submit 'Search' %>
<% end %>
endsnippet
