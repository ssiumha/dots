snippet string_capture "regexp, capture"
case RUBY_VERSION[/\d+\.\d+/, 0]
when '3.2'
end
endsnippet

snippet frozen "string literal"
# frozen_string_literal: true
endsnippet

snippet task "rake task"
task ##{1::task_name} do
end
endsnippet

snippet call_rails_task "rake using from rails"
require 'rake'
##{1:AppName}::Application.load_tasks

Rake::Task[##{2:task_name}].invoke
endsnippet

snippet popen3 "call popen with env"
env_vars = { 'VAR1' => 'value1' }
command = ['echo', '$VAR1']
Open3.popen3(env_vars, *command) do |stdin, stdout, stderr, with_thr|
  puts stdout.read
end
endsnippet

snippet instance_patch "extend monkey patch method"
class << ##{1:@instance}
  def ##{2:method_name}
  end
end
endsnippet

snippet color_hex_to_hsl "code template"
class String
  def to_hsl
    # self -> #ffaaee
    r, g, b = self.downcase
                  .match(/#?(\h\h)(\h\h)(\h\h)/)
                  .captures
                  .map { |s| (s.hex / 255.0).round(2) }

    cmin, cmax = [r,g,b].minmax
    delta = cmax - cmin

    h = if delta.zero? then 0
        elsif cmax == r then ((g - b) / delta) % 6
        elsif cmax == g then (b - r) / delta + 2
        else (r - g) / delta + 4
        end
    h = (h * 60).round % 360

    l = ((cmax + cmin) / 2.0).round(2) * 100
    s = delta.zero? ? 0 : (delta / (1 - (cmax + cmin - 1).abs)).round(2) * 100

    [h.to_i, s.to_i, l.to_i]
  end
end
endsnippet

snippet inline_gemfile "install without Gemfile"
require 'bundler/inline'
gemfile do
  source 'https://rubygems.org'
  gem 'listen', '3.8.0'
end
endsnippet

snippet defined_variable "check"
@foo = [] unless defined?(@foo)
endsnippet

snippet rows_to_table "2d array to html table format"
def rows_to_html_table(rows)
  html = '<table>'
  rows.each_with_index do |row, i|
    if i.zero?
      html += '<thead>'
    else
      html += '<tbody>'
    end

    html += '<tr>'
    row.each do |col|
      if i.zero?
        html += "<th>#{col}</th>"
      else
        html += "<td>#{col}</td>"
      end
    end
    html += '</tr>'

    if i.zero?
      html += '</thead>'
    else
      html += '</tbody>'
    end
  end
  html += '</table>'
end
endsnippet

snippet elapsed_time "performance check"
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
run!
finish = Process.clock_gettime(Process::CLOCK_MONOTONIC)

elapsed = finish - start
endsnippet

snippet pattern_matching "case hinting"
case expression
in [1, a, [3, b] => c] if condition
in [_, *a, ^a]
in { foo: 1, **rest }
in foo:, bar: b
in foo:, **_
in foo:, **rest if rest.empty?
in foo:, **nil
in (1..10)
in a: 0.. => first
in Integer | String
else
end
endsnippet

snippet pattern_matching_raise "exact matching"
begin
  case [1,2]
  in [1]
    :no_match
  end
rescue NoMatchingPatternError => e
end
endsnippet

snippet pattern_matching_deconstruct_keys "awesome case"
class Date
  def deconstruct_keys(keys) = { year:, meonth:, day: }
end

case Date.new
in year:
end
endsnippet

snippet pattern_matching_oneline_in "if no matching, nothing"
{ foo:, bar: } in { foo: f }
endsnippet

snippet pattern_matching_oneline_arrow "if no matching, NoMatchingPatternError"
{ foo:, bar: } => { foo: }
endsnippet

snippet pattern_matching_blocks "any, all, select, find"
users.any? { it in { name: /C/, age: 20.. } }
endsnippet

snippet pattern_matching_expression "require ( )"
Time.now.year in ^(rand(2021..2023))
endsnippet

snippet option_parser "template"
require 'optparse'

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: cmd [--help]'

  opts.on('-sTAG', '--search=TAG', 'search option description') { options[:search] = _1 }

  opts.on_tail('-h', '--help', 'show help') { puts opts; exit 0 }
end.tap(&:parse!)

order_arg = ARGV.pop

puts option_parser.help
endsnippet

snippet option_parser_into ""
options = {}
option_parser = OptionParser.new do |opts|
end.tap { _1.parse! into: options }
endsnippet

snippet chdir ""
Dir.chdir(path) do
end
endsnippet

snippet regex_named_capture ""
# or $~[:name]
matches[:name] if matches = str.match(/(?<name>.+)/)
endsnippet

snippet popen ""
selected = IO.popen(cmd, 'w+') do |p|
  p.puts snip_headers
  p.close_write
  p.read
end
endsnippet

snippet glob ""
Dir.glob('*.rb').each do |f|
end
endsnippet

snippet glob_short ""
Dir['*.rb']
endsnippet

snippet run_script "like __main__"
if __FILE__ == $0 # or $PROGRAM_NAME
  main
end
endsnippet

snippet ractor_take_all "take all"
5.times.map { Ractor.new(_1) { |i| sleep(5-i); puts i; i } }.map(&:take)
# [0, 1, 2, 3, 4]
endsnippet

snippet thread_join_all "take all"
5.times.map { |i| Thread.new { sleep(5 - i); puts i; i } }.map(&:join).map(&:value)
# [0, 1, 2, 3, 4]
endsnippet

snippet process_with_thread ""
thread = Thread.new do
ensure
  puts 'killed'
end

at_exit do
  Thread.kill(thread)
end

loop do
  sleep 1
end
endsnippet

snippet signal_trap "Signal.trap"
trap(:INT) do # 2, ^C
  exit
end

trap(:TERM) do # 9, kill
  exit
end
endsnippet

snippet argf "special variable"
$<
endsnippet

snippet command_line_arguments "special variable"
$*
endsnippet

snippet stdout "special variable"
$>
endsnippet

snippet gets "special variable"
$_
endsnippet

snippet current_pid "special variable"
$$
endsnippet

snippet watch_process "with listen"
require 'listen'

pid = nil

trap(:INT) do
  Process.kill(:INT, pid)
  exit
end

Listen.to('./app') do |modified, added, removed|
  Process.kill(:INT, pid) if (modified.count + added.count + removed.count).positive?
end.start

loop do
  pid = Process.spawn('')

  Process.wait(pid)
  pid = nil

  sleep 1
end
endsnippet

snippet open3 ""
require 'open3'
stdout_str, stderr, status = Open3.capture3(%Q[cmd])
stdout_str => String
endsnippet

snippet fzf ""
open("|fzf", "w+") do
  _1.puts items
  return _1.read.chomp
end
endsnippet

snippet net_http_get ""
require 'net/http'

Net::HTTP.get(URI('https://example.com/api/v1/tasks'), { 'Authorization':  "Bearer #{token}" })
endsnippet

snippet net_http_post ""
Net::HTTP.post(_uri, data, headers).body
endsnippet

snippet rspec_base "Arrange, Act, Assert"
describe '어떤 클래스 등' do
  describe '어떤 처리, #method...' do
    let(:user) { create :user }

    context 'XX인 경우' do
      before do
        travel_to '2000-01-01 09:00'.in_time_zone
      end
      after { travel_back }

      it 'AAA 상태가 된다' do
        expect { action! }.to \
          change { user.count }.from(0).to(1)

        expect(value).to eq 500
      end
    end
  end
end
endsnippet

snippet yard_return_example ""
# @see http://example.com
# @see SomeClass#method
# @param name [String]
# @param opts [Hash]
# @option opts [String] :subject
#
# Method Descriptions
# Default options are:
#
# @example
#   {
#     name: 'John',
#     age: 20
#   }
#
# @example Not found user
#   nil
#
# @raise [ExceptionClass] description
#
# @return [Hash, nil] user info
endsnippet

snippet text_zip_with_base64 ""
require 'zlib'
require 'base64'
Zlib::Deflate.deflate(text).then { Base64.encode64(_1) }
endsnippet

snippet text_unzip_with_base64 ""
require 'zlib'
require 'base64'
Base64.decode64(text).then { Zlib::Inflate.inflate(_1) }
endsnippet

snippet csv ""
require 'csv'

file = CSV.generate do |csv|
  csv << ['name', 'email']
  csv << ['kim', 'kim@example.com']
end

File.write('/tmp/result.csv', file)
endsnippet

snippet csv_read ""
require 'csv'

csv = CSV.read('users.csv', headers: true)

# OR
CSV.foreach('users.csv', headers: true, headers_converter: proc { _1.downcase }) do |row|
  row['id']
end
endsnippet

snippet awk ""
ls | ruby -lane 'puts $F[1]'
endsnippet

snippet pipe "stdin"
ls | ruby -e 'ARGF.each_line.map { ... }'
endsnippet
