snippet if_zero_length_string ""
if [ -z "${A}" ]; then
fi
endsnippet

snippet if_positive_length_string "length > 0"
if [ -n "${A}" ]; then
fi
endsnippet

snippet if_directory ""
if [ -d "${A}" ]; then
fi
endsnippet

snippet if_symbolic_file ""
if [ -L "${A}" ]; then
fi
endsnippet

snippet if_readable_file ""
if [ -r "${A}" ]; then
fi
endsnippet

snippet if_file_size_positive "size > 0"
if [ -s "${A}" ]; then
fi
endsnippet

snippet if_file_writable ""
if [ -w "${A}" ]; then
fi
endsnippet

snippet if_file_executable ""
if [ -x "${A}" ]; then
fi
endsnippet

snippet if_regular_file "is not directory"
if [ -f "${A}" ]; then
fi
endsnippet

snippet if_empty_directory ""
if [ -z "$(ls -A /path/to/dir)" ]; then
  echo "empty"
fi
endsnippet

snippet source_location "get directory path"
script_dir=$(dirname $(realpath "$0"))
endsnippet

snippet source_location_v2 "get directory path"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
endsnippet

snippet iter_textline "loop lines"
cat $file | while IFS=$'\n' read -r line; do
	echo $line
done
endsnippet

snippet args "xxx.sh arg1"
arg1=$1
endsnippet

snippet mise_shebang "base ruby"
#!/usr/bin/env -S mise x ruby@latest -- ruby
# vim: ft=ruby
endsnippet

snippet template_cli "basic with help"
#!/bin/bash

show_help() {
  echo "Usage: $0 <argument>"
  echo "Description: Describe your argument here."
}

if [ -z "$1" ]; then
  show_help
  exit 1
fi
endsnippet

snippet template_strict "start shell script"
#!/usr/bin/env bash

set -euxo pipefail
endsnippet

snippet run_docker_compose "run heredoc"
cat <<-EOF | docker compose --file - --project-name ${COMPOSE_NAME} up --detach --force-recreate --wait
  version: "3.9"

  services:
    postgres:
      image: postgres:11-alpine
      container_name: \${COMPOSE_PROJECT_NAME}-postgres
      healthcheck:
        test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER']
      environment:
        POSTGRES_DB: test_db
        POSTGRES_USER: user
        POSTGRES_PASSWORD: password
      expose:
        - "5432"
      networks:
        - docker-compose-default

    redis:
      image: redis
      container_name: \${COMPOSE_PROJECT_NAME}-redis
      healthcheck:
        test: ['CMD', 'redis-cli', 'ping']
        interval: 10s
        timeout: 5s
        retries: 5
      expose:
        - "6379"
      networks:
        - docker-compose-default

    mysql:
      image: mysql:8.0
      container_name: \${COMPOSE_PROJECT_NAME}-mysql
      healthcheck:
        test: ['CMD', 'mysqladmin' ,'ping', '-h', 'localhost']
        timeout: 20s
        retries: 10
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        MYSQL_USER: "user"
        MYSQL_PASSWORD: "password"
        MYSQL_DATABASE: "database"
      expose:
        - "3306"
      networks:
        - docker-compose-default

  networks:
    docker-compose-default:
      external: true
EOF
endsnippet

snippet kubectl_with_perl "run heredoc"
kubectl exec -i -n ns deploy/app -- perl - <<-'EOF'
EOF
endsnippet

snippet check_using_perl ""
result=$(perl - <<-'EOF' $1 $2
  ($ft, $_) = @ARGV;
  @res = ();
  // ...
  print join " ", @res;
EOF
)
endsnippet

snippet sar "from sysstat"
# https://www.tpc.org/tpcc/
# https://www.baeldung.com/linux/sar-system-statistics
#
# /var/log/sysstat/sa00
# sar -q 2 3     # Load Average
# sar -n IP 2 3  # network
# sar -b 2 3     # io
# sar -S 2 3     # swap
# sar -r 2 3     # memory
# sar -P ALL 1 1 # cpu all
# sar -P 0 2 3   # cpu
/usr/bin/env -S S_COLORS=never sar -A -s 01:00 -e 02:00 | cat
endsnippet

snippet ksar "visual sar sysstat"
# https://github.com/vlsi/ksar
# java -jar ~/Downloads/ksar-5.2.4.jar
endsnippet

snippet check_kube_context ""
if [ 'arn:aws:eks:ap-northeast-2:000000000000:cluster/tmp' != $(kubectl config current-context) ]; then
  echo "denied context"
  exit 1
fi
endsnippet

snippet check_kube_rollout_complete "can using -f deploy.yaml"
kubectl rollout status -n app-dev deploy/some-app
endsnippet

snippet echo_red "or \033. RGYBMCK"
echo -e "\e[0;31m RED \e[0;m"
endsnippet

snippet echo_blink "or \e. recommend \033 in Makefile"
echo -e "\033[0;31;5m RED \033[0;m"
endsnippet

snippet gh_pr_comment ""
gh pr comment ${PR_NUMBER} --body-file comment.md
endsnippet

snippet set_e "if return code is not 0, exit"
#!/usr/bin/env bash
set -e
endsnippet

snippet set_pipefail "if pipe fail, exit"
#!/usr/bin/env bash
set -o pipefail
endsnippet

snippet set_strict ""
#!/usr/bin/env bash
set -euxo pipefail

# -e: errexit. exit on error
# -u: nounset. exit on undefined variable
# -x: xtrace. print command
# -o pipefail: exit on pipe fail
endsnippet

snippet docker_run_httpbin "testing connect"
docker run --rm -d -p 8000:80 kennethreitz/httpbin
endsnippet

snippet docker_run_whoami "testing connect"
docker run --rm -d -p 8000:80 traefik/whoami
endsnippet

snippet docker_run_json_server "testing connect"
docker run --rm -d -p 3000:3000 typicode/json-server --watch db.json
endsnippet

snippet send_dev_tcp "with file descriptor"
exec 3<>/dev/tcp/example.com/80
echo -e "GET / HTTP/1.1\r\nHost: example.com\r\nConnection: close\r\n\r\n" >&3
cat <&3
exec 3>&-
endsnippet

snippet check_stat ""
stat -c %a:%U:%G /etc
endsnippet

snippet option_parser "using switch"
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --) shift; break; ;;
    -a|--option-a) flag_a=true; shift ;;
    -b|--option-b) param_b="$2"; shift 2 ;;
    -h|--help)
      echo "Usage: $0 [-a] [-b value]"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done
endsnippet

snippet update_apt_sources ""
cat <<-EOF > '/etc/apt/auth.conf.d/myauth.conf'
  machine nexus.example.com login dev password 1234
EOF

cat <<-EOF > '/etc/apt/sources.list'
  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy main restricted
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy main restricted

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates main restricted
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates main restricted

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy universe
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy universe

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates universe
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates universe

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy multiverse
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy multiverse

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates multiverse
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-updates multiverse

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-backports main restricted universe multiverse
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-backports main restricted universe multiverse

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security main restricted
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security main restricted

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security universe
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security universe

  deb https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security multiverse
  deb-src https://nexus.example.com/repository/ubuntu-jammy/ubuntu/ jammy-security multiverse
EOF

apt-get update
endsnippet

snippet multiple_process_wait "overmind"
#!/bin/bash

process1 &
process2 &

wait
endsnippet
