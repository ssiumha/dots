snippet eks_managed_node_gorups "in eks module"
  eks_managed_node_group_defaults = {
    instance_types = ["m5.xlarge"]
    max_size       = 99
  }
  eks_managed_node_groups = {
    "${local.cluster_name}_a" = {
      label = {
        Postfix = "a"
      }
    }
  }
endsnippet

snippet manual_irsa "s3 role sample"
resource "aws_iam_role" "irsa-foo-role" {
  name = "${local.cluster_name}-irsa-foo-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Sid = ""
      Effect = "Allow"
      Action = "sts:AssumeRoleWithWebIdentity"

      Principal = {
        Federated = module.eks.oidc_provider_arn
      }

      Condition = {
        StringEquals = {
          "${replace(module.eks.oidc_provider, "https://", "")}:sub" = "system:serviceaccount:<namespace>:<accountname>"
        }
      }
    }]
  })
}

resource "aws_iam_policy" "foo-policy" {
  name = "${local.cluster_name}-foo-policy"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Action = [
        "s3:ListBucket",
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ]
      Resource = [
        "arn:aws:s3:::${local.cluster_name}-foo",
        "arn:aws:s3:::${local.cluster_name}-foo/*"
      ]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "irsa-foo-role" {
  role = aws_iam_role.irsa-foo-role.name
  policy_arn = aws_iam_policy.foo-policy.arn
}
endsnippet

snippet kubernetes_provider "version.tf"
provider "kubernetes" {
  config_path = "~/.kube/config"
  config_context = module.eks.cluster_arn
}
endsnippet

snippet base_output "outputs.tf"
output "private_subnets" {
  description = "private subnets of the VPC"
  value       = module.vpc.private_subnets
}
endsnippet

snippet base_variable "variables.tf"
# can use var.region
variable "region" {
  default = "ap-northeast-2"
}
endsnippet

snippet base_providers "providers.tf"
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "~> 5"
    }
  }
}

provider "aws" {
  region  = var.region
}

# multi account
# usage:
#  resource ... {
#    provider = aws.account1
#  }
#  module ... {
#    providers = { aws = aws.account1 }
#  }
provider "aws" {
  alias   = "account1"
  profile = "account1"
}
endsnippet

snippet base_vpc_module ""
data "aws_availability_zones" "available" {
}

locals {
  terraform_env = "dev"

  # use ap-northeast-2a, ap-northeast-2b
  availability_zone_names = slice(data.aws_availability_zones.available.names, 0, 2)
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.13.0"

  name = "dev"
  cidr = "10.0.0.0/16"

  azs             = local.availability_zone_names
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true

  manage_default_network_acl    = false
  manage_default_route_table    = false
  manage_default_security_group = false

  tags = {
    Terraform = "true"
    Environment = local.terraform_env
  }
}
endsnippet

snippet fullset_simple_ec2 ""
data "aws_availability_zones" "available" {
}

locals {
  terraform_env = "app-dev"

  # use ap-northeast-2a, ap-northeast-2b
  availability_zone_names = slice(data.aws_availability_zones.available.names, 0, 2)
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.13.0"

  name = "app-dev"
  cidr = "10.0.0.0/16"

  azs             = local.availability_zone_names
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true

  manage_default_network_acl    = false
  manage_default_route_table    = false
  manage_default_security_group = false

  tags = {
    Terraform = "true"
    Environment = local.terraform_env
  }
}

resource "aws_key_pair" "app_dev_keypair" {
  key_name   = "app_dev_keypair"
  public_key = file("~/.ssh/id_ed25519.pub")
}

resource "aws_instance" "app_dev" {
  ami             = "ami-0e18fe6ecdad223e5"  # AmazonLinux2
  instance_type   = "m5.xlarge"
  subnet_id       = module.vpc.public_subnets[0]
  key_name        = aws_key_pair.app_dev_keypair.key_name

  vpc_security_group_ids = [aws_security_group.app_sg.id]

  associate_public_ip_address = true

  root_block_device {
    volume_size = 32
    volume_type = "gp3"
  }

  tags = {
    Name = "app-dev"
  }

  user_data = <<-EOF
    #!/bin/bash
    sudo yum update -y
    sudo yum install docker -y
    sudo service docker start
    sudo usermod -aG docker ec2-user
    sudo mkdir -p /usr/local/lib/docker/cli-plugins/
    sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
    sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
  EOF
}

resource "aws_eip" "app_dev" {
  instance = aws_instance.app_dev.id
}

resource "aws_security_group" "app_sg" {
  vpc_id = module.vpc.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [
      "999.999.999.999/32"
    ]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "app-dev"
  }
}

output "eip_public_ip" {
  description = "The Elastic IP of the EC2 instance"
  value       = aws_eip.app_dev.public_ip
}

output "instance_public_ip" {
  description = "The public IP of the EC2 instance"
  value       = aws_instance.app_dev.public_ip
}
endsnippet

snippet fullset_ses ""
data "aws_route53_zone" "app_dev" {
  name = "example.com"
}

resource "aws_iam_user" "app_dev_user" {
  name = "app-dev-user"
  path = "/"
}

resource "aws_iam_access_key" "app_dev_user_key" {
  user = aws_iam_user.app_dev_user.name
}

resource "aws_iam_user_policy_attachment" "ses_full_access" {
  user       = aws_iam_user.app_dev_user.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSESFullAccess"
}

resource "aws_ses_domain_identity" "domain_identity" {
  domain   = data.aws_route53_zone.app_dev.name
}

resource "aws_ses_email_identity" "email_identity" {
  email = "admin@${data.aws_route53_zone.app_dev.name}"
}

resource "aws_route53_record" "ses_verification" {
  zone_id = data.aws_route53_zone.app_dev.id
  name    = "_amazonses.${data.aws_route53_zone.app_dev.name}"
  type    = "TXT"
  records = [aws_ses_domain_identity.domain_identity.verification_token]
  ttl     = 600
}

resource "aws_ses_domain_dkim" "dkim" {
  domain = aws_ses_domain_identity.domain_identity.domain
}

resource "aws_route53_record" "dkim" {
  for_each = toset(aws_ses_domain_dkim.dkim.dkim_tokens)
  zone_id  = data.aws_route53_zone.app_dev.id
  name     = "${each.key}._domainkey.${data.aws_route53_zone.app_dev.name}"
  type     = "CNAME"
  records  = ["${each.key}.dkim.amazonses.com"]
  ttl      = 600
}

resource "aws_route53_record" "spf" {
  zone_id = data.aws_route53_zone.app_dev.id
  name    = data.aws_route53_zone.app_dev.name
  type    = "TXT"
  records = [
    "v=spf1 include:amazonses.com ~all",
    "forward-email-site-verification=${local.forward_email_verification_string}"
  ]
  ttl     = 600
}
endsnippet

snippet wildcard_record ""
resource "aws_route53_zone" "dev" {
  name = "example.com"
}

resource "aws_route53_record" "wildcard_dev" {
  zone_id = aws_route53_zone.dev.zone_id
  name    = "*.dev.example.com"
  type    = "A"
  ttl     = "60"
  records = ['999.999.999.999']
}
endsnippet

snippet module_s3 "not tested"
module "s3_bucket" {
  source  = "terraform-aws-modules/s3-bucket/aws"
  version = "4.2.0"

  bucket = "app" # global unique
  acl    = "public-read"

  control_object_ownership = true
  object_ownership         = "BucketOwnerPreferred"

  versioning = {
    enabled = true
  }
}
endsnippet

snippet fullset_s3 "with user"
resource "aws_s3_bucket" "bucket" {
  bucket = "app-dev"

  tags = {
    Name = "app-dev"
  }
}

resource "aws_s3_bucket_ownership_controls" "bucket_ownership_controls" {
  bucket = aws_s3_bucket.bucket.id

  rule {
    object_ownership = "BucketOwnerPreferred"
  }
}

resource "aws_s3_bucket_cors_configuration" "cors_configuration" {
  bucket = aws_s3_bucket.bucket.id

  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["GET", "PUT", "HEAD"]
    allowed_origins = ["*"]
    expose_headers  = ["ETag"]
    max_age_seconds = 3000
  }
}

resource "aws_s3_bucket_public_access_block" "public_access_block" {
  bucket = aws_s3_bucket.bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_acl" "bucket_acl" {
  depends_on = [
    aws_s3_bucket_ownership_controls.bucket_ownership_controls,
    aws_s3_bucket_public_access_block.public_access_block
  ]

  bucket = aws_s3_bucket.bucket.id
  acl    = "public-read"
}

resource "aws_s3_bucket_policy" "bucket_policy" {
  bucket = aws_s3_bucket.bucket.id
  policy = <<-POLICY
  {
      "Version": "2012-10-17",
      "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::${aws_s3_bucket.bucket.id}/*"
            ]
        }
      ]
  }
  POLICY
}

resource "aws_s3_bucket_versioning" "bucket_versioning" {
  bucket = aws_s3_bucket.bucket.id

  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_iam_user_policy" "s3_user_policy" {
  name = "appDevS3UserPolicy"
  user = aws_iam_user.app_dev_user.name

  policy = jsonencode({
    Version   = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = "*",
        Resource = ["${aws_s3_bucket.bucket.arn}/*"]
      }
    ]
  })
}
endsnippet

snippet ignore_changes "can ignore specific attribute changes"
  lifecycle {
    ignore_changes = [desired_count]
  }
endsnippet
