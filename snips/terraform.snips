snippet eks_managed_node_gorups "in eks module"
  eks_managed_node_group_defaults = {
    instance_types = ["m5.xlarge"]
    max_size       = 99
  }
  eks_managed_node_groups = {
    "${local.cluster_name}_a" = {
      label = {
        Postfix = "a"
      }
    }
  }
endsnippet

snippet manual_irsa "s3 role sample"
resource "aws_iam_role" "irsa-foo-role" {
  name = "${local.cluster_name}-irsa-foo-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Sid = ""
      Effect = "Allow"
      Action = "sts:AssumeRoleWithWebIdentity"

      Principal = {
        Federated = module.eks.oidc_provider_arn
      }

      Condition = {
        StringEquals = {
          "${replace(module.eks.oidc_provider, "https://", "")}:sub" = "system:serviceaccount:<namespace>:<accountname>"
        }
      }
    }]
  })
}

resource "aws_iam_policy" "foo-policy" {
  name = "${local.cluster_name}-foo-policy"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Action = [
        "s3:ListBucket",
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ]
      Resource = [
        "arn:aws:s3:::${local.cluster_name}-foo",
        "arn:aws:s3:::${local.cluster_name}-foo/*"
      ]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "irsa-foo-role" {
  role = aws_iam_role.irsa-foo-role.name
  policy_arn = aws_iam_policy.foo-policy.arn
}
endsnippet

snippet kubernetes_provider "version.tf"
provider "kubernetes" {
  config_path = "~/.kube/config"
  config_context = module.eks.cluster_arn
}
endsnippet

snippet base_output "outputs.tf"
output "private_subnets" {
  description = "private subnets of the VPC"
  value       = module.vpc.private_subnets
}
endsnippet

snippet base_variable "variables.tf"
# can use var.region
variable "region" {
  default = "ap-northeast-2"
}
endsnippet

snippet base_providers "providers.tf"
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "~> 5"
    }
  }
}

provider "aws" {
  region  = var.region
}
endsnippet

snippet base_vpc_module ""
data "aws_availability_zones" "available" {
}

locals {
  terraform_env = "dev"

  # use ap-northeast-2a, ap-northeast-2b
  availability_zone_names = slice(data.aws_availability_zones.available.names, 0, 2)
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.13.0"

  name = "dev"
  cidr = "10.0.0.0/16"

  azs             = local.availability_zone_names
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true

  manage_default_network_acl    = false
  manage_default_route_table    = false
  manage_default_security_group = false

  tags = {
    Terraform = "true"
    Environment = local.terraform_env
  }
}
endsnippet
